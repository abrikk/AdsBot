from typing import Union, Dict

from aiogram import types
from aiogram.utils.markdown import hunderline, hbold, hcode, hitalic
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Group, Row, Button, SwitchTo, \
    Start
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.when import Whenable

from tgbot.misc.states import Sell, Main


def get_active_section(state: str):
    sections = {
        'tags': '–¢–µ–≥–∏',
        'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
        'price': '–¶–µ–Ω–∞',
        'photo': '–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        'contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
    }
    return sections.get(state)


def make_tags(tag: str, where: str) -> str:
    tags = {
        "sell": "#–ø—Ä–æ–¥–∞–º",
        "buy": "#–∫—É–ø–ª—é",
        "extra": tag and "#" + tag
    }
    if tag:
        return f"{tags.get(where)}, {tags.get('extra')}"
    else:
        return tags.get(where)


async def get_sell_text(dialog_manager: DialogManager, **_kwargs):
    data = dialog_manager.current_context().widget_data
    print(data)
    state = dialog_manager.current_context().state.state.split(":")[-1]

    # entered data from user
    tags: str = make_tags(tag=data.get('tag'), where="sell")
    name: str = data.get('name') or '‚ûñ'
    description: str = data.get('description') or '‚ûñ'
    price = data.get('price') or '‚ûñ'
    photo = data.get('photo') or '‚ûñ'
    contact = data.get('contact') or '‚ûñ'

    # identifying the active section
    ttags = state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'
    tname = state == 'name' and hunderline('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
    tdescription = state == 'description' and hunderline('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
    tprice = state == 'price' and hunderline('–¶–µ–Ω–∞') or '–¶–µ–Ω–∞'
    tphoto = state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    tcontact = state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'

    text = (f"1. {ttags}: {tags}\n"
            f"2. {tname}: {hbold(name)}\n"
            f"3. {tdescription}: {hitalic(description)}\n"
            f"4. {tprice}: {hcode(price)}\n"
            f"5. {tphoto}: {photo}\n"
            f"6. {tcontact}: {hcode(contact)}\n")

    match state:
        case 'tags':
            if not data.get('tag'):
                text = '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ ' \
                       '–Ω–∏–∂–µ:\n\n' + text
            else:
                text = '#Ô∏è‚É£  –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ' \
                       '—Ç–µ–≥, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π.\n\n' + text
        case 'name':
            if not data.get('name'):
                text = 'üî° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥:\n\n' + text
            else:
                text = 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n' + text
        case 'description':
            if not data.get('description'):
                text = 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥:\n\n' + text
            else:
                text = 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n' + text
        case 'price':
            if not data.get('price'):
                text = 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥:\n\n' + text
            else:
                text = 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤—É—é —Ü–µ–Ω—É.\n\n' + text
        case 'photo':
            if not data.get('quantity'):
                text = 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –ø–æ –æ–¥–Ω–æ–º—É ' \
                       '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                       'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ - <code>5</code>:\n\n' + text
            else:
                text = 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                       '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n' + text
        case _:
            if not data.get('contact'):
                text = 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏' \
                       ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
                       '\"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\":\n\n' + text
            else:
                text = 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.\n\n' + text

    return {"sell_text": text, "page": get_active_section(state)}


async def change_page(_obj: Union[types.CallbackQuery, types.Message], button: Union[Button, TextInput],
                      manager: DialogManager, *_text):
    action: str = button.widget_id
    current_state = manager.current_context().state.state.split(":")[-1]

    if action == 'left':
        if current_state == 'tags':
            await manager.dialog().switch_to(Sell.contact)
        else:
            await manager.dialog().back()
    elif action == 'right':
        if current_state == 'contact':
            await manager.dialog().switch_to(Sell.tags)
        else:
            await manager.dialog().next()
    elif current_state != 'contact':
        await manager.dialog().next()


async def add_tag(_call: types.CallbackQuery, button: Button, manager: DialogManager):
    tag = button.widget_id

    tags = {
        "childs_world": "–¥–µ—Ç—Å–∫–∏–π_–º–∏—Ä",
        "real_estate": "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "work": "—Ä–∞–±–æ—Ç–∞",
        "animals": "–∂–∏–≤–æ—Ç–Ω—ã–µ",
        "house_garden": "–¥–æ–º_–∏_—Å–∞–¥",
        "electronics": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "services": "—É—Å–ª—É–≥–∏",
        "fashion_style": "–º–æ–¥–∞_–∏_—Å—Ç–∏–ª—å",
        "sport": "—Å–ø–æ—Ä—Ç",
    }

    manager.current_context().widget_data['tag'] = tags.get(tag)


async def delete_tag(_call: types.CallbackQuery, _button: Button, manager: DialogManager):
    manager.current_context().widget_data.pop('tag', None)


def tag_is_empty(_data: Dict, _widget: Whenable, manager: DialogManager):
    return manager.current_context().widget_data.get('tag') is None


def tag_exist(_data: Dict, _widget: Whenable, manager: DialogManager):
    return manager.current_context().widget_data.get('tag') is not None


def tag_buttons():
    buttons = Group(
        Button(text=Const("#Ô∏è‚É£–î–µ—Ç—Å–∫–∏–π –º–∏—Ä"), id="childs_world", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"), id="real_estate", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), id="transport", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–†–∞–±–æ—Ç–∞"), id="work", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ñ–∏–≤–æ—Ç–Ω—ã–µ"), id="animals", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–î–æ–º –∏ —Å–∞–¥"), id="house_garden", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"), id="electronics", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–£—Å–ª—É–≥–∏"), id="services", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ú–æ–¥–∞ –∏ —Å—Ç–∏–ª—å"), id="fashion_style", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–°–ø–æ—Ä—Ç"), id="sport", on_click=add_tag),
        width=2,
        when=tag_is_empty
    )

    return buttons


def get_widgets():
    buttons = (
        Format(text="{sell_text}", when="sell_text"),
        Row(
            Button(text=Const("<<"), id="left", on_click=change_page),
            Button(text=Format(text="{page}"), id="page"),
            Button(text=Const(">>"), id="right", on_click=change_page)
        ),
        Row(
            Start(text=Const("üîö –ù–∞–∑–∞–¥"), id="back_to_main", state=Main.main,
                  mode=StartMode.RESET_STACK),
            SwitchTo(text=Const("–ì–æ—Ç–æ–≤–æ"), id="done", state=Sell.done)
        )
    )
    return buttons


sell_dialog = Dialog(
    Window(
        Button(
            text=Const("–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥"),
            id="delete_tag",
            when=tag_exist,
            on_click=delete_tag
        ),
        tag_buttons(),
        *get_widgets(),
        state=Sell.tags,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(id="name", on_success=change_page),
        state=Sell.name,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(id="description", on_success=change_page),
        state=Sell.description,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(id="price", on_success=change_page),
        state=Sell.price,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(id="photo", on_success=change_page),
        state=Sell.photo,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(id="contact", on_success=change_page),
        state=Sell.contact,
        getter=[get_sell_text]
    ),
    Window(
        state=Sell.done,
        getter=[get_sell_text]
    )
)
