import operator
from typing import Union, Dict, Any

import flag
import phonenumbers
from aiogram import types
from aiogram.utils.markdown import hunderline, hbold, hcode, hitalic
from aiogram_dialog import Dialog, Window, DialogManager, StartMode, ShowMode
from aiogram_dialog.manager.protocols import ManagedDialogAdapterProto
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.kbd import Group, Row, Button, SwitchTo, \
    Start, Checkbox, Radio
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.when import Whenable

from tgbot.misc.media_widget import DynamicMediaFileId
from tgbot.misc.states import Sell, Main

REQUIRED_FIELDS = {"description", "price", "contact", "tag"}


def get_active_section(state: str):
    sections = {
        'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
        'price': '–¶–µ–Ω–∞',
        'contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        'photo': '–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        'tags': '–¢–µ–≥–∏'
    }
    return sections.get(state)


def make_tags(tag: str, where: str) -> str:
    tags = {
        "sell": "#–ø—Ä–æ–¥–∞–º",
        "buy": "#–∫—É–ø–ª—é",
        "extra": tag and "#" + tag
    }
    if tag:
        return f"{tags.get(where)}, {tags.get('extra')}"
    elif where == 'preview' and tag is None:
        return f"{tags.get('sell')}, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–≥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚ö†Ô∏è"
    else:
        return tags.get(where)


def humanize_phone_number(phone_number: str):
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number
    phone_number = phonenumbers.parse(phone_number)
    emoji = ' ' + flag.flag(f"{phonenumbers.region_code_for_country_code(phone_number.country_code)}")
    return phonenumbers.format_number(phone_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL) + emoji


async def get_sell_text(dialog_manager: DialogManager, **_kwargs):
    data = dialog_manager.current_context().widget_data
    print(1, data)
    print(2, data.get("price"))
    print(5, type(data.get("price")))
    # print(3, dialog_manager.dialog().find("price").get_value())
    # print(4, type(dialog_manager.dialog().find("price").get_value()))
    state = dialog_manager.current_context().state.state.split(":")[-1]

    # entered data from user
    title: str = data.get('title') or '‚ûñ'
    description: str = data.get('description') or '‚ûñ'

    price = (data.get('price') and ((float(data.get('price')).is_integer() and int(data.get('price'))) or float(data.get('price')))) or '‚ûñ'
    currency = data.get('currency', '‚Ç¥')
    negotiable = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if data.get('negotiable') else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
    contact = (data.get('contact') and humanize_phone_number(data.get('contact'))) or '‚ûñ'

    photo = data.get('photos_file_id') and str(len(
        data.get('photos_file_id')
    )) + ' —à—Ç' or '‚ûñ'

    tags: str = make_tags(tag=data.get('tag'), where="sell")

    # identifying the active section
    ttitle = state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
    tdescription = state == 'description' and hunderline('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
    tprice = state == 'price' and hunderline('–¶–µ–Ω–∞') or '–¶–µ–Ω–∞'
    tcontact = state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    tphoto = state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    ttags = state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'

    text = (f"1. {ttitle}: {hbold(title)}\n"
            f"2. {tdescription}: {hitalic(description)}\n"
            f"3. {tprice}: {hcode(str(price) + ' ' + (data.get('price') and currency or ''))} {data.get('price') and negotiable or ''}\n"
            f"4. {tcontact}: {hcode(contact)}\n"
            f"5. {tphoto}: {photo}\n"
            f"6. {ttags}: {tags}\n")

    match state:
        case 'title':
            if not data.get('title'):
                text = 'üî° –ü—Ä–∏–¥—É–º–∞–π—Ç–µ, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–π –≤–Ω–∏–º–∞–Ω–∏–µ ' \
                       '–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, ' \
                       '—á—Ç–æ–±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\n\n' + text
            else:
                text = 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n' + text

        case 'description':
            if not data.get('description'):
                text = 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥. –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ –∏ ' \
                       '–±—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã. –¢–∞–∫ –≤—ã –∏–∑–±–µ–∂–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è ' \
                       '–≤–æ–ø—Ä–æ—Å–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–µ–π. –¢–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ ' \
                       '–Ω–∞–π—Ç–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n' + text
            else:
                text = 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n' + text

        case 'price':
            if not data.get('price'):
                text = 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                       '–≤–∞–ª—é—Ç—É –∏ —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç–æ—Ä–≥:\n\n' + text
            else:
                text = 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                       '–Ω–æ–≤—É—é —Ü–µ–Ω—É.\n\n' + text

        case 'contact':
            if not data.get('contact'):
                text = 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏' \
                       ' –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:\n\n' + text
            else:
                text = 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏ ' \
                       '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é.\n\n' + text

        case 'photo':
            if not data.get('photos_file_id'):
                text = 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –ø–æ –æ–¥–Ω–æ–º—É ' \
                       '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                       'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>5</code>:\n\n' + text
            else:
                text = 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                       '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                       '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n' + text

        case _:
            if not data.get('tag'):
                text = '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ ' \
                       '–Ω–∏–∂–µ:\n\n' + text
            else:
                text = '#Ô∏è‚É£  –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ' \
                       '—Ç–µ–≥, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π.\n\n' + text

    return {"sell_text": text, "page": get_active_section(state)}


async def get_preview_text(dialog_manager: DialogManager, **_kwargs):
    widget_data = dialog_manager.current_context().widget_data

    tags: str = make_tags(widget_data.get('tag'), where='preview')
    title: str = "–ù–∞–∑–≤–∞–Ω–∏–µ: " + (widget_data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ö†Ô∏è'))
    description: str = "–û–ø–∏—Å–∞–Ω–∏–µ: " + (widget_data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚ö†Ô∏è'))
    price: str = "–¶–µ–Ω–∞: " + (widget_data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚ö†Ô∏è'))
    contact: str = "–ö–æ–Ω—Ç–∞–∫—Ç—ã " + (widget_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ö†Ô∏è'))
    photos_id: list = widget_data.get('photos_file_id', [])
    photo = '–§–æ—Ç–æ: ' + ((photos_id and str(len(photos_id)) + ' —à—Ç') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚ö†Ô∏è')

    print(photos_id)

    if photos_id:
        current_page = widget_data.setdefault('current_page', 1)
        print(current_page)
    else:
        current_page = None

    if len(photos_id) > 1:
        widget_data['photos_len'] = len(photos_id)

    text = (f"{tags}\n\n"
            f"{title}\n\n"
            f"{description}\n\n"
            f"{price}\n\n"
            f"{contact}\n\n"
            f"{photo}\n\n")

    return {"preview_text": text, "file_id": get_current_index(photos_id, current_page),
            "show_scroll": len(photos_id) > 1,
            "photo_text": len(photos_id) > 1 and current_page and f"{current_page}/{len(photos_id)}"}


async def get_confirm_text(dialog_manager: DialogManager, **_kwargs):
    widget_data = dialog_manager.current_context().widget_data

    tags: str = make_tags(widget_data.get('tag'), where='confirm')
    title: str = "–ù–∞–∑–≤–∞–Ω–∏–µ: " + (widget_data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ö†Ô∏è'))
    description: str = "–û–ø–∏—Å–∞–Ω–∏–µ: " + (widget_data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚ö†Ô∏è'))
    price: str = "–¶–µ–Ω–∞: " + (widget_data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚ö†Ô∏è'))
    contact: str = "–ö–æ–Ω—Ç–∞–∫—Ç—ã " + (widget_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ö†Ô∏è'))
    photos_id: list = widget_data.get('photos_file_id', [])
    photo = '–§–æ—Ç–æ: ' + ((photos_id and str(len(photos_id)) + ' —à—Ç') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚ö†Ô∏è')


def get_current_index(photos: list[str] = None, page: int | None = None) -> None | str:
    if not all([photos, page]):
        return None
    else:
        return photos[page-1]


async def change_photo(_call: types.CallbackQuery, button: Button, manager: DialogManager):
    widget_data = manager.current_context().widget_data
    current_page: int = widget_data.get('current_page')
    photos_len: int = widget_data.get('photos_len')

    action: str = button.widget_id

    if action == 'left_photo':
        current_page -= 1
        if current_page < 1:
            current_page = photos_len
    elif action == 'right_photo':
        current_page += 1
        if current_page > photos_len:
            current_page = 1

    widget_data['current_page'] = current_page


async def change_page(_obj: Union[types.CallbackQuery, types.Message], button: Union[Button, TextInput],
                      manager: DialogManager, *_text):
    action: str = button.widget_id
    current_state = manager.current_context().state.state.split(":")[-1]

    if action == 'left':
        if current_state == 'title':
            await manager.dialog().switch_to(Sell.tags)
        else:
            await manager.dialog().back()
    elif action == 'right':
        if current_state == 'tags':
            await manager.dialog().switch_to(Sell.title)
        else:
            await manager.dialog().next()
    elif current_state != 'tags':
        await manager.dialog().next()


async def add_tag(_call: types.CallbackQuery, button: Button, manager: DialogManager):
    tag = button.widget_id

    tags = {
        "childs_world": "–¥–µ—Ç—Å–∫–∏–π_–º–∏—Ä",
        "real_estate": "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "work": "—Ä–∞–±–æ—Ç–∞",
        "animals": "–∂–∏–≤–æ—Ç–Ω—ã–µ",
        "house_garden": "–¥–æ–º_–∏_—Å–∞–¥",
        "electronics": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "services": "—É—Å–ª—É–≥–∏",
        "fashion_style": "–º–æ–¥–∞_–∏_—Å—Ç–∏–ª—å",
        "sport": "—Å–ø–æ—Ä—Ç",
    }

    manager.current_context().widget_data['tag'] = tags.get(tag)


async def currency_selected(_call: types.CallbackQuery, _widget: Any, manager: DialogManager, item_id: str):
    currencies = {'USD': '$', 'EUR': '‚Ç¨', 'RUB': '‚ÇΩ', 'UAH': '‚Ç¥'}
    manager.current_context().widget_data['currency'] = currencies[item_id]


async def delete_tag(_call: types.CallbackQuery, _button: Button, manager: DialogManager):
    manager.current_context().widget_data.pop('tag', None)


def tag_is_empty(_data: Dict, _widget: Whenable, manager: DialogManager):
    return manager.current_context().widget_data.get('tag') is None


def tag_exist(_data: Dict, _widget: Whenable, manager: DialogManager):
    return manager.current_context().widget_data.get('tag') is not None


# Restrictions
def fixed_size_64(text: str):
    if len(text) > 128:
        raise ValueError


def fixed_size_1024(text: str):
    if len(text) > 1024:
        raise ValueError


def validate_phone_number(phone_number: str):
    try:
        if not phone_number.startswith('+'):
            phone_number = '+' + phone_number
        phone_number = phonenumbers.parse(phone_number)

        # shallow check whether the phone number is invalid
        if phonenumbers.is_possible_number(phone_number):
            # deep check whether the phone number is invalid
            if not phonenumbers.is_valid_number(phone_number):
                raise ValueError
        else:
            raise ValueError

    except phonenumbers.NumberParseException:
        # the input is really gibberish
        raise ValueError


async def invalid_input(message: types.Message, _widget: TextInput, manager: DialogManager):
    state = manager.current_context().state
    manager.show_mode = ShowMode.EDIT
    match state:
        case Sell.title:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ 64 —Å–∏–º–≤–æ–ª–æ–≤."
                                 " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        case Sell.description:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ 128 —Å–∏–º–≤–æ–ª–æ–≤."
                                 " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        case Sell.contact:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def price_validator(message: types.Message, dialog: ManagedDialogAdapterProto, manager: DialogManager):
    try:
        price: float = (float(message.text).is_integer() and int(message.text)) or round(float(message.text), 2)

        if not (price > 0.01):
            raise ValueError

        manager.current_context().widget_data["price"] = price
        await dialog.next()
    except ValueError:
        manager.show_mode = ShowMode.EDIT
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.01. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def pic_validator(message: types.Message, _dialog: ManagedDialogAdapterProto, manager: DialogManager):
    match message.content_type:
        case types.ContentType.PHOTO:
            photo = message.photo[-1]
            widget_data = manager.current_context().widget_data.setdefault('photos_file_id', [])
            widget_data.append(photo.file_id)
        case _:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# Buttons and dialogs
async def set_default(_, dialog_manager: DialogManager):
    await dialog_manager.dialog().find('currency_code').set_checked(event="", item_id="UAH")
    dialog_manager.current_context().widget_data['currency'] = "‚Ç¥"


async def get_currency_data(**_kwargs):
    currencies = [
        ('$', 'USD'),
        ('‚Ç¨', 'EUR'),
        ('‚ÇΩ', 'RUB'),
        ('‚Ç¥', 'UAH')
    ]
    return {'currencies': currencies}


def tag_buttons():
    buttons = Group(
        Button(text=Const("#Ô∏è‚É£–î–µ—Ç—Å–∫–∏–π –º–∏—Ä"), id="childs_world", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"), id="real_estate", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), id="transport", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–†–∞–±–æ—Ç–∞"), id="work", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ñ–∏–≤–æ—Ç–Ω—ã–µ"), id="animals", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–î–æ–º –∏ —Å–∞–¥"), id="house_garden", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"), id="electronics", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–£—Å–ª—É–≥–∏"), id="services", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–ú–æ–¥–∞ –∏ —Å—Ç–∏–ª—å"), id="fashion_style", on_click=add_tag),
        Button(text=Const("#Ô∏è‚É£–°–ø–æ—Ä—Ç"), id="sport", on_click=add_tag),
        width=2,
        when=tag_is_empty
    )

    return buttons


def get_widgets():
    buttons = (
        Format(text="{sell_text}", when="sell_text"),
        Row(
            Button(text=Const("<<"), id="left", on_click=change_page),
            Button(text=Format(text="{page}"), id="page"),
            Button(text=Const(">>"), id="right", on_click=change_page)
        ),
        Row(
            Start(text=Const("üîö –ù–∞–∑–∞–¥"), id="back_to_main", state=Main.main,
                  mode=StartMode.RESET_STACK),
            SwitchTo(text=Const("üëÅ"), id="preview", state=Sell.preview),
            SwitchTo(text=Const("–ì–æ—Ç–æ–≤–æ"), id="done", state=Sell.done)
        )
    )
    return buttons


sell_dialog = Dialog(
    Window(
        *get_widgets(),
        TextInput(
            id="title",
            type_factory=fixed_size_64,
            on_error=invalid_input,
            on_success=change_page),
        state=Sell.title,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        TextInput(
            id="description",
            type_factory=fixed_size_1024,
            on_error=invalid_input,
            on_success=change_page),
        state=Sell.description,
        getter=[get_sell_text]
    ),
    Window(
        Checkbox(
            checked_text=Const("–¢–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω: –î–∞ ‚úÖ"),
            unchecked_text=Const("–¢–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω: –ù–µ—Ç ‚ùå"),
            id="negotiable",
            default=False
        ),
        Radio(
            checked_text=Format("‚úîÔ∏è {item[0]}"),
            unchecked_text=Format("{item[0]}"),
            id="currency_code",
            item_id_getter=operator.itemgetter(1),
            items="currencies",
            on_click=currency_selected
        ),
        *get_widgets(),
        MessageInput(
            func=price_validator,
            content_types=types.ContentType.TEXT
        ),
        state=Sell.price,
        getter=[get_sell_text, get_currency_data]
    ),
    Window(
        *get_widgets(),
        TextInput(
            id="contact",
            type_factory=validate_phone_number,
            on_error=invalid_input,
            on_success=change_page
        ),
        state=Sell.contact,
        getter=[get_sell_text]
    ),
    Window(
        *get_widgets(),
        MessageInput(pic_validator, content_types=[types.ContentType.ANY]),
        state=Sell.photo,
        getter=[get_sell_text]
    ),
    Window(
        Button(
            text=Const("–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥"),
            id="delete_tag",
            when=tag_exist,
            on_click=delete_tag
        ),
        tag_buttons(),
        *get_widgets(),
        state=Sell.tags,
        getter=[get_sell_text]
    ),
    Window(
        Row(
            Button(Const("<<"), id="left_photo", on_click=change_photo),
            Button(Format(text="{photo_text}", when="photo_text"), id="photo_pos"),
            Button(Const(">>"), id="right_photo", on_click=change_photo),
            when="show_scroll"
        ),
        DynamicMediaFileId(file_id=Format(text='{file_id}'), when="file_id"),
        Format(text="{preview_text}", when="preview_text"),
        SwitchTo(text=Const("–ù–∞–∑–∞–¥"), id="back", state=Sell.title),
        state=Sell.preview,
        getter=[get_preview_text]
    ),
    # Window(
    #     Format(text="{confirm_text}", when="confirm_text"),
    #     Button(
    #         text=Const("‚úÖ –î–∞"),
    #         id="yes",
    #         on_click=on_confirm
    #     ),
    #     Row(
    #       SwitchTo(text=Const("–ù–∞–∑–∞–¥"), id="back", state=Sell.title),
    #       Start(text=Const("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="back", state=Main.main, mode=StartMode.RESET_STACK),
    #     ),
    #     state=Sell.confirm,
    #     getter=[get_confirm_text]
    # ),
    on_start=set_default
)
