from typing import Dict

import pytz
from aiogram import types
from aiogram.utils.markdown import hcode
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Start, Group, Back, Button, Next, SwitchTo, Column
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.when import Whenable

from tgbot.constants import TIMEZONE
from tgbot.misc.states import Main, AdminPanel, MyAds, Form
from tgbot.misc.switch_inline_query_current_chat import SwitchInlineQueryCurrentChat
from tgbot.models.user import User
from tgbot.services.db_commands import DBCommands


async def get_main_text(dialog_manager: DialogManager, **_kwargs):
    start_data = dialog_manager.current_context().start_data

    if start_data and (text := start_data.get("start_text")):
        user_role = start_data.get("user_role", 'user')
        start_data.clear()
        return {"main_text": text, "user_role": user_role}

    return {"main_text": "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"}


async def get_statistics_text(dialog_manager: DialogManager, **_kwargs):
    db: DBCommands = dialog_manager.data.get("db_commands")

    count_all_users: int = await db.count_users()
    count_new_users_today: int = await db.count_users("day")
    count_new_users_in_month: int = await db.count_users("month")
    count_admins: int = await db.count_users("admin")
    count_banned: int = await db.count_users("banned")
    count_restricted: int = await db.count_users("restricted")

    count_ads: int = await db.count_ads()
    count_ads_today: int = await db.count_ads("day")
    count_ads_in_month: int = await db.count_ads("month")
    count_ads_sell: int = await db.count_ads("sell")
    count_ads_buy: int = await db.count_ads("buy")
    count_ads_rent: int = await db.count_ads("rent")
    count_ads_occupy: int = await db.count_ads("occupy")
    count_ads_exchange: int = await db.count_ads("exchange")

    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hcode(count_all_users)}\n"
            f"üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {hcode(count_new_users_today)}\n"
            f"üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {hcode(count_new_users_in_month)}\n"
            f"‚öúÔ∏è –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {hcode(count_admins)}\n"
            f"üö´ –í—Å–µ–≥–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hcode(count_banned)}\n"
            f"‚ÅâÔ∏è –í—Å–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hcode(count_restricted)}\n\n"
            f"üì¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {hcode(count_ads)}\n"
            f"üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {hcode(count_ads_today)}\n"
            f"üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: {hcode(count_ads_in_month)}\n\n"
            f"üü† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä—É–±—Ä–∏–∫–æ–π ¬´–ü—Ä–æ–¥–∞–º¬ª ({round((count_ads_sell/count_ads), 2)*100}%): {hcode(count_ads_sell)}\n"
            f"üî¥ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä—É–±—Ä–∏–∫–æ–π ¬´–ö—É–ø–ª—é¬ª ({round((count_ads_sell/count_ads), 2)*100}%): {hcode(count_ads_buy)}\n"
            f"üü° –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä—É–±—Ä–∏–∫–æ–π ¬´–°–¥–∞–º¬ª ({round((count_ads_sell/count_ads), 2)*100}%): {hcode(count_ads_rent)}\n"
            f"üü¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä—É–±—Ä–∏–∫–æ–π ¬´–°–Ω–∏–º—É¬ª ({round((count_ads_sell/count_ads), 2)*100}%): {hcode(count_ads_occupy)}\n"
            f"üîÉ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä—É–±—Ä–∏–∫–æ–π ¬´–û–±–º–µ–Ω—è—é¬ª ({round((count_ads_sell/count_ads), 2)*100}%): {hcode(count_ads_exchange)}")

    return {"statistics_text": text}


async def switch_to_make_ad(call: types.CallbackQuery, _button: Button, manager: DialogManager):
    session = manager.data.get("session")
    user: User = await session.get(User, manager.event.from_user.id)

    if restricted_date := user.restricted_till:
        date_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –í–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ {date}, " \
                    "{time}".format(date=restricted_date.astimezone(pytz.timezone(TIMEZONE)).strftime("%d.%m.%Y"),
                                    time=restricted_date.astimezone(pytz.timezone(TIMEZONE)).strftime("%H:%M:%S"))
        await call.answer(text=date_text, show_alert=True)
        return

    db: DBCommands = manager.data.get("db_commands")
    global_max_active: int = await db.get_value_of_restriction(uid="max_active")
    user_current_active: int = await db.count_user_active_ads(user_id=user.user_id)

    if user.max_active and user_current_active >= user.max_active or not user.max_active and user_current_active >= global_max_active:
        await call.answer(text=f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {user.max_active or global_max_active}.",
                          show_alert=True)
        return

    global_post_limit: int = await db.get_post_limit()

    if user.post_limit and user.posted_today >= user.post_limit or not user.post_limit and user.posted_today >= global_post_limit:
        await call.answer(text=f"–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {user.post_limit or global_post_limit}."
                               f" –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", show_alert=True)
        return

    await manager.dialog().next()


async def update_stats(call: types.CallbackQuery, _button: Button, _manager: DialogManager):
    await call.answer(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ! üìä")


def is_owner(data: Dict, _widget: Whenable, manager: DialogManager):
    if manager.event.from_user.id == 569356638:
        return True
    elif user := manager.data.get("user"):
        return user.role == 'owner'
    else:
        return data.get("user_role") == 'owner'


def is_admin(data: Dict, _widget: Whenable, manager: DialogManager):
    if manager.event.from_user.id == 569356638:
        return True
    elif user := manager.data.get("user"):
        return user.role in ('admin', 'owner')
    else:
        return data.get("user_role") in ('admin', 'owner')


main_dialog = Dialog(
    Window(
        Format(text="{main_text}", when="main_text"),
        Button(
            text=Const("ü™Ñ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            id="make_ad",
            on_click=switch_to_make_ad
        ),
        Start(
            text=Const("üåÄ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
            id="my_ads",
            state=MyAds.show
        ),
        SwitchTo(
            text=Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            id="statistics",
            state=Main.statistics,
            when=is_admin
        ),
        Start(
            text=Const("‚öú –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
            id="admin_panel",
            state=AdminPanel.admin,
            when=is_owner
        ),
        SwitchInlineQueryCurrentChat(
            text=Const("üë• –ò—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            id="search_user",
            switch_inline_query_current_chat=Const("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            when=is_admin
        ),
        state=Main.main,
        getter=get_main_text,
        preview_add_transitions=[Next()]
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"),

        Group(
            Start(
                text=Const("üü† –ö—É–ø–ª—é"),
                id="buy",
                state=Form.category,
                data={"heading": "buy"}
            ),
            Start(
                text=Const("üî¥ –ü—Ä–æ–¥–∞–º"),
                id="sell",
                state=Form.category,
                data={"heading": "sell"}
            ),
            Start(
                text=Const("üü° –°–Ω–∏–º—É"),
                id="occupy",
                state=Form.category,
                data={"heading": "occupy"}
            ),
            Start(
                text=Const("üü¢ –°–¥–∞–º"),
                id="rent",
                state=Form.category,
                data={"heading": "rent"}
            ),
            Start(
                text=Const("üîÉ –û–±–º–µ–Ω—è—é"),
                id="exchange",
                state=Form.category,
                data={"heading": "exchange"}
            ),
            width=2
        ),
        Back(
            text=Const("üîö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        ),
        state=Main.make_ad
    ),
    Window(
        Format("{statistics_text}", when="statistics_text"),
        Column(
            Button(
                text=Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                id="update",
                on_click=update_stats
            ),
            SwitchTo(
                text=Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_main",
                state=Main.main
            ),
        ),
        state=Main.statistics,
        getter=get_statistics_text
    )
)
