from dataclasses import dataclass, field
from datetime import datetime

import pytz
from aiogram.utils.markdown import hitalic, hcode, hbold


@dataclass
class Ad:
    state_class: str

    state: str = ''

    heading: str = ""
    tag_category: str = ""
    tag_name: str = ""

    description: str = ""
    photos: dict | list = field(default_factory=dict)
    price: int = field(default_factory=int)
    contacts: list[str] = field(default_factory=list)

    currency_code: str = ""
    negotiable: bool = False
    mention: str = ""

    contact_limit: int = field(default=0)
    pic_limit: int = field(default=0)
    post_limit: int = field(default=0)

    post_link: str = ""
    updated_at: datetime = field(default=datetime.now(tz=pytz.timezone("Europe/Kiev")))
    created_at: datetime = field(default=datetime.now(tz=pytz.timezone("Europe/Kiev")))

    def to_text(self, where: str = None) -> str:
        description: str = self.description or '‚ûñ'
        price: float | int | str = self.price or '‚ûñ'
        contacts: str = self.contacts and self.humanize_phone_numbers() or '‚ûñ'

        if where == "edit" and self.pic_limit == 0:
            photos_len: str = "<code>–ù–µ—Ç —Ñ–æ—Ç–æ</code>"
        else:
            photos_len: str = self.photos and str(len(self.photos)) + ' —à—Ç' or '‚ûñ'

        if self.state_class in ("sell", "rent"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        tdescription = '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tphoto = '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        tcontact = '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        if self.state_class == "exchange":
            return (self.current_heading(where=where) +
                    f"1. {tdescription}: {hitalic(description)}\n"
                    f"2. {tphoto}: {photos_len}\n"
                    f"3. {tcontact}: {contacts}\n")
        else:
            if self.state_class in ("sell", "rent"):
                tprice = '–¶–µ–Ω–∞'
            else:
                tprice = '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'

            return (self.current_heading(where=where) +
                    f"1. {tdescription}: {description}\n"
                    f"2. {tphoto}: {photos_len}\n"
                    f"3. {tprice}: {hbold(str(price)) + ' ' + (self.price and self.currency or '')} {self.price and negotiable or ''}\n"
                    f"4. {tcontact}: {contacts}\n")

    def current_heading(self, where: str = None) -> str:
        match self.state:
            case 'description':
                return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n'

            case 'price':
                if self.state_class in ("sell", "rent", "exchange"):
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                               '–≤–∞–ª—é—Ç—É –∏ —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç–æ—Ä–≥:\n\n'
                else:
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É:\n\n'

            case 'contact':
                if not self.contacts:
                    return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>):\n\n'
                else:
                    return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ' \
                           ' –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>).\n\n'

            case _:
                if where == "edit" and self.pic_limit == 0:
                    return '‚õîÔ∏è –¢–∞–∫ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–∫–∏ ' \
                           '–≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫–∏ –ø—Ä–∏ ' \
                           '–∏–∑–º–µ–Ω–µ–Ω–∏–∏. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ ' \
                           '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n'
                elif not self.photos and self.state_class == "exchange":
                    return 'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ' \
                           ' –æ–±–º–µ–Ω—è—Ç—å (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ - <b>{self.pic_limit}</b>:\n\n'
                elif not self.photos:
                    return 'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ' \
                           '–ø–æ –æ–¥–Ω–æ–º—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ - <b>{self.pic_limit}</b>:\n\n'
                else:
                    return 'üì∑ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                           '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ - <b>{self.pic_limit}</b>:\n\n'

    def preview(self, where: str = None) -> str:
        preview_list: list[str] = [self.make_tags()]
        if self.state_class in ("sell", "rent"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        preview_list.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.description}")

        if self.price and self.state_class in ("sell", "rent"):
            preview_list.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {str(self.price) + ' ' + (self.price and self.currency or '')} "
                                f"{self.price and negotiable or ''}")
        elif self.price and self.state_class not in ("sell", "rent", "exchange"):
            preview_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {str(self.price) + ' ' + self.currency}")

        preview_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")

        if self.photos:
            preview_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos)} —à—Ç")

        if where == "edit":
            stat_text: str = (f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {self.post_link}\n"
                              f"{self.make_datetime_text()}")
            preview_list.append(stat_text)

        return '\n\n'.join(preview_list)

    def confirm(self) -> str:
        if self.state_class in ("sell", "rent"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        confirm_list: list[str] = [
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            " —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.description}"
        ]
        if self.price and self.state_class not in ("sell", "rent"):
            confirm_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {str(self.price) + ' ' + self.currency}")
        elif self.price:
            confirm_list.append(f"–¶–µ–Ω–∞: {str(self.price) + ' ' + (self.price and self.currency or '')} "
                                f"{self.price and negotiable or ''}",)
        confirm_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        if self.photos:
            confirm_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos)} —à—Ç")

        return '\n\n'.join(confirm_list)

    def post(self, where: str = None) -> str:
        if self.state_class in ("sell", "rent"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        post_list: list[str] = [
            self.make_tags(),
            f"{self.description}",

            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}",
            f"–¢–µ–ª–µ–≥—Ä–∞–º: {self.mention}"
        ]

        if self.price and self.state_class in ("sell", "rent"):
            post_list.insert(2, f"–¶–µ–Ω–∞: {str(self.price) + ' ' + self.currency + ' ' + negotiable or ''}")
        elif self.price:
            post_list.insert(2, f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {str(self.price) + ' ' + self.currency}")

        if where == "admin_group":
            post_list.append(f"{self.make_datetime_text()}")
            post_list.insert(0, f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {self.post_link}")

        return '\n\n'.join(post_list)

    def humanize_phone_numbers(self) -> str:
        return ", ".join(map(hitalic, self.contacts))

    def make_tags(self) -> str:
        headings: dict = {
            "buy": "–ö—É–ø–ª—é",
            "sell": "–ü—Ä–æ–¥–∞–º",
            "occupy": "–°–Ω–∏–º—É",
            "rent": "–°–¥–∞–º",
            "exchange": "–û–±–º–µ–Ω—è—é"
        }
        heading = "#" + headings.get(self.state_class)
        category = "#" + headings.get(self.state_class) + self.tag_category
        tag = "#" + headings.get(self.state_class) + self.tag_category + self.tag_name
        return " ".join([heading, category, tag])

    def make_datetime_text(self) -> str:
        return f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: <code>{self.created_at.astimezone(pytz.timezone('Europe/Kiev')).strftime('%d.%m.%Y %H:%M:%S')}</code>\n" \
               f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>{self.updated_at.astimezone(pytz.timezone('Europe/Kiev')).strftime('%d.%m.%Y %H:%M:%S')}</code>"

    @property
    def currency(self):
        return {'USD': '–¥–æ–ª.', 'EUR': '–µ–≤—Ä–æ', 'RUB': '—Ä—É–±.', 'UAH': '–≥—Ä–Ω.'}.get(self.currency_code, "—Ä—É–±.")
