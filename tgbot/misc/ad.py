from dataclasses import dataclass, field

import flag
import phonenumbers
from aiogram.utils.markdown import hunderline, hbold, hitalic


@dataclass
class Ad:
    state: str
    tags: list[str] = field(default_factory=list)
    title: str = field(default_factory=str)
    description: str = field(default_factory=str)
    price: float | int = field(default_factory=float)
    contacts: list[str] = field(default_factory=list)
    photos_ids: list[str] = field(default_factory=list)

    def to_text(self):
        raise NotImplementedError("Can't instantiate an abstract method.")

    def current_heading(self) -> str:
        raise NotImplementedError("Can't instantiate an abstract method.")

    @staticmethod
    def humanize_phone_numbers(phone_numbers: list[str]) -> str:
        list_of_numbers: list[str] = list()
        for number in phone_numbers:
            if not number.startswith('+'):
                number = '+' + number
            number = phonenumbers.parse(number)
            emoji = ' ' + flag.flag(f"{phonenumbers.region_code_for_country_code(number.country_code)}")
            list_of_numbers.append(phonenumbers.format_number(number, phonenumbers.PhoneNumberFormat.INTERNATIONAL) + emoji)

        return ", ".join(list_of_numbers)


class SalesAd(Ad):
    currency: str = "‚Ç¥"
    negotiable: bool = False

    def to_text(self) -> str:
        title: str = self.title or '‚ûñ'
        description: str = self.description or '‚ûñ'
        price: float | int | str = self.price or '‚ûñ'
        negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        contacts: str = self.contacts and self.humanize_phone_number(self.contacts) or '‚ûñ'

        photos_len: str = self.photos_ids and str(len(self.photos_ids)) + ' —à—Ç' or '‚ûñ'

        ttitle = self.state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tdescription = self.state == 'description' and hunderline('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tprice = self.state == 'price' and hunderline('–¶–µ–Ω–∞') or '–¶–µ–Ω–∞'
        tcontact = self.state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        tphoto = self.state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        ttags = self.state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'

        (f"1. {ttitle}: {hbold(title)}\n"
         f"2. {tdescription}: {hitalic(description)}\n"
         f"3. {tprice}: {hcode(str(price) + ' ' + (data.get('price') and currency or ''))} {data.get('price') and negotiable or ''}\n"
         f"4. {tcontact}: {hcode(contact)}\n"
         f"5. {tphoto}: {photo}\n"
         f"6. {ttags}: {tags}\n")


    def current_heading(self) -> str:
        match self.state:
            case 'title':
                if not self.title:
                    return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
                else:
                    return 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n'

            case 'description':
                if not self.description:
                    return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥. :\n\n'
                else:
                    return 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n'

            case 'price':
                if not self.price:
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É –∏ —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç–æ—Ä–≥:\n\n'
                else:
                    return 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é —Ü–µ–Ω—É.\n\n'

            case 'contact':
                if not self.contacts:
                    return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:\n\n'
                else:
                    return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.\n\n'

            case 'photo':
                if not self.photos_ids:
                    return 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –ø–æ –æ–¥–Ω–æ–º—É ' \
                           '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>5</code>:\n\n'
                else:
                    return 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                           '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n'

            case _:
                if not self.tags:
                    return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ ' \
                           '–Ω–∏–∂–µ:\n\n'
                else:
                    return '#Ô∏è‚É£  –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ' \
                           '—Ç–µ–≥, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π.\n\n'


class PurchaseAd(Ad):
    def to_text(self) -> str:
        pass

    def current_heading(self) -> str:
        pass

