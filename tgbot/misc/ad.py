from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import Optional

import flag
import phonenumbers
from aiogram.utils.markdown import hunderline, hbold, hitalic, hcode


@dataclass
class Ad(ABC):
    state: Optional[str] = None
    tags: list[str] = field(default_factory=list)
    description: str = field(default_factory=str)
    price: float | int = field(default_factory=float)
    contacts: list[str] = field(default_factory=list)
    title: str = field(default_factory=str)
    photos_ids: list[str] = field(default_factory=list)

    currency_code: str = field(default_factory=str)
    currency: str = {'USD': '$', 'EUR': '‚Ç¨', 'RUB': '‚ÇΩ', 'UAH': '‚Ç¥'}.get(currency_code, "‚Ç¥")
    mention: str = field(default_factory=str)

    tag_limit: int = field(default_factory=int)
    contact_limit: int = field(default_factory=int)
    pic_limit: int = field(default_factory=int)
    post_limit: int = field(default_factory=int)

    @abstractmethod
    def to_text(self):
        pass

    @abstractmethod
    def current_heading(self) -> str:
        pass

    @abstractmethod
    def preview(self) -> str:
        pass

    @abstractmethod
    def confirm(self) -> str:
        pass

    @abstractmethod
    def post(self) -> str:
        pass

    def humanize_phone_numbers(self) -> str:
        list_of_numbers: list[str] = list()
        for number in self.contacts:
            if not number.startswith('+'):
                number = '+' + number
            number = phonenumbers.parse(number)
            emoji = ' ' + flag.flag(f"{phonenumbers.region_code_for_country_code(number.country_code)}")
            list_of_numbers.append(
                hcode(phonenumbers.format_number(number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)) + emoji)

        return ", ".join(list_of_numbers)

    def make_tags(self) -> str:
        return ", ".join(["#" + tag for tag in self.tags])


@dataclass
class SalesAd(Ad):
    negotiable: bool = False

    def to_text(self) -> str:
        description: str = self.description or '‚ûñ'
        price: float | int | str = self.price or '‚ûñ'
        negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        contacts: str = self.contacts and self.humanize_phone_numbers() or '‚ûñ'

        title: str = self.title or '‚ûñ'
        photos_len: str = self.photos_ids and str(len(self.photos_ids)) + ' —à—Ç' or '‚ûñ'

        ttags = self.state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'
        tdescription = self.state == 'description' and hunderline(
            '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tprice = self.state == 'price' and hunderline('–¶–µ–Ω–∞') or '–¶–µ–Ω–∞'
        tcontact = self.state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        ttitle = self.state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') \
                 or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        tphoto = self.state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'

        return (self.current_heading() +
                f"1. {ttags}: {self.make_tags()}\n"
                f"2. {tdescription}: {hitalic(description)}\n"
                f"3. {tprice}: {hcode(str(price) + ' ' + (self.price and self.currency or ''))} {self.price and negotiable or ''}\n"
                f"4. {tcontact}: {contacts}\n"
                f"5. {ttitle}: {hbold(title)}\n"
                f"6. {tphoto}: {photos_len}\n")

    def current_heading(self) -> str:
        match self.state:
            case "tags":
                if not self.tags:
                    return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ ' \
                           f'–Ω–∏–∂–µ (–º–∞–∫—Å. <code>{self.tag_limit}</code>):\n\n'
                else:
                    return '#Ô∏è‚É£  –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –Ω–∏–∂–µ' \
                           f'(–º–∞–∫—Å. <code>{self.tag_limit}</code>).\n\n'

            case 'description':
                if not self.description:
                    return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥:\n\n'
                else:
                    return 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n'

            case 'price':
                if not self.price:
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É –∏ —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç–æ—Ä–≥:\n\n'
                else:
                    return 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é —Ü–µ–Ω—É.\n\n'

            case 'contact':
                if not self.contacts:
                    return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>):\n\n'
                else:
                    return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           ' –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>).\n\n'

            case 'title':
                if not self.title:
                    return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
                else:
                    return 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           ' –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n'

            case _:
                if not self.photos_ids:
                    return 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –ø–æ –æ–¥–Ω–æ–º—É ' \
                           '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'
                else:
                    return 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                           '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'

    def preview(self) -> str:
        preview_list: list[str] = []
        negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'

        if self.tags:
            preview_list.append(self.make_tags())
        else:
            preview_list.append('–¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è')

        if self.title:
            preview_list.append(f"–ü—Ä–æ–¥–∞–µ—Ç—Å—è {hbold(self.title)}")

        if self.description:
            preview_list.append(f"{hitalic(self.description)}")
        else:
            preview_list.append("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùóÔ∏è")

        if self.price:
            preview_list.append(f"{hcode(str(self.price) + ' ' + (self.price and self.currency or ''))} "
                                f"{self.price and negotiable or ''}")
        else:
            preview_list.append("–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚ùóÔ∏è")

        if self.contacts:
            preview_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        else:
            preview_list.append("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è")

        if self.photos_ids:
            preview_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        return '\n\n'.join(preview_list)

    def confirm(self) -> str:
        negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'

        confirm_list: list[str] = [
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
            " —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
            f"–¢–µ–≥–∏: {self.make_tags()}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hitalic(self.description)}",
            f"–¶–µ–Ω–∞: {hcode(str(self.price) + ' ' + (self.price and self.currency or ''))} "
            f"{self.price and negotiable or ''}",
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}",
        ]

        if self.title:
            confirm_list.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(self.title)}")
        if self.photos_ids:
            confirm_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        return '\n\n'.join(confirm_list)

    def post(self) -> str:
        negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'

        post_list: list[str] = [
            self.make_tags()
        ]

        if self.title:
            post_list.append(f"–ü—Ä–æ–¥–∞–µ—Ç—Å—è {hbold(self.title)}")

        post_list.append(f"{hitalic(self.description)}")
        post_list.append(f"{hcode(str(self.price) + ' ' + self.currency) + ' ' + negotiable}")
        post_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        post_list.append(f"–¢–µ–ª–µ–≥—Ä–∞–º: {self.mention}")
        return '\n\n'.join(post_list)


class PurchaseAd(Ad):
    def to_text(self) -> str:
        description: str = self.description or '‚ûñ'
        contacts: str = self.contacts and self.humanize_phone_numbers() or '‚ûñ'
        price: float | int | str = self.price or '‚ûñ'
        title: str = self.title or '‚ûñ'
        photos_len: str = self.photos_ids and str(len(self.photos_ids)) + ' —à—Ç' or '‚ûñ'

        ttags = self.state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'
        tdescription = self.state == 'description' and hunderline(
            '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tcontact = self.state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        tprice = self.state == 'price' and hunderline('–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        ttitle = self.state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') \
                 or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        tphoto = self.state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'

        return (self.current_heading() +
                f"1. {ttags}: {self.make_tags()}\n"
                f"2. {tdescription}: {hitalic(description)}\n"
                f"3. {tcontact}: {contacts}\n"
                f"4. {tprice}: {hcode(str(price) + ' ' + (self.price and self.currency or ''))}\n"
                f"5. {ttitle}: {hbold(title)}\n"
                f"6. {tphoto}: {photos_len}\n")

    def current_heading(self) -> str:
        match self.state:
            case "tags":
                if not self.tags:
                    return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ ' \
                           f'–∫—É–ø–∏—Ç—å –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–º–∞–∫—Å. <code>{self.tag_limit}</code>):\n\n'
                else:
                    return '#Ô∏è‚É£  –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ' \
                           f'—Ç–µ–≥, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π (–º–∞–∫—Å. <code>{self.tag_limit}</code>).\n\n'

            case 'description':
                if not self.description:
                    return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä–æ–µ ' \
                           '–≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\n'
                else:
                    return 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n'

            case 'contact':
                if not self.contacts:
                    return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>):\n\n'
                else:
                    return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           f'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä (–º–∞–∫—Å. <code>{self.contact_limit}</code>).\n\n'

            case 'price':
                if not self.price:
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∏ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É:\n\n'
                else:
                    return 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é —Ü–µ–Ω—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n\n'

            case 'title':
                if not self.title:
                    return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
                           '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
                else:
                    return 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n'

            case _:
                if not self.photos_ids:
                    return 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
                           '–ø–æ –æ–¥–Ω–æ–º—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'
                else:
                    return 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                           '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>'

    def preview(self) -> str:
        preview_list: list[str] = []

        if self.tags:
            preview_list.append(self.make_tags())
        else:
            preview_list.append('–¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è')

        if self.title:
            preview_list.append(f"–ö—É–ø–ª—é {hbold(self.title)}")

        if self.description:
            preview_list.append(f"{hitalic(self.description)}")
        else:
            preview_list.append("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùóÔ∏è")

        if self.price:
            preview_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")

        if self.contacts:
            preview_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        else:
            preview_list.append("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è")

        if self.photos_ids:
            preview_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        return '\n\n'.join(preview_list)

    def confirm(self) -> str:
        confirm_list: list[str] = [
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
            " —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
            f"–¢–µ–≥–∏: {self.make_tags()}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hitalic(self.description)}"
        ]

        if self.price:
            confirm_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")

        confirm_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")

        if self.title:
            confirm_list.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(self.title)}")
        if self.photos_ids:
            confirm_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        return '\n\n'.join(confirm_list)

    def post(self) -> str:
        post_list: list[str] = [
            self.make_tags()
        ]

        if self.title:
            post_list.append(f"–ö—É–ø–ª—é {hbold(self.title)}")

        post_list.append(f"{hitalic(self.description)}")
        if self.price:
            post_list.append(f"{hcode(str(self.price) + ' ' + self.currency)}")
        post_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        post_list.append(f"–¢–µ–ª–µ–≥—Ä–∞–º: {self.mention}")
        return '\n\n'.join(post_list)
