from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional

from aiogram.utils.markdown import hunderline, hbold, hitalic, hcode

from tgbot.constants import ACTIVE, INACTIVE, REJECTED


@dataclass
class Ad:
    state_class: str

    status: Optional[str] = None
    state: Optional[str] = None
    tags: list[str] = field(default_factory=list)
    title: str = ""
    photos_ids: list[str] = field(default_factory=list)
    photos_unique_ids: list[str] = field(default_factory=list)
    description: str = ""
    price: float | int = field(default_factory=float)
    contacts: list[str] = field(default_factory=list)

    currency_code: str = ""
    negotiable: bool = False
    mention: str = ""

    tag_limit: int = field(default=0)
    contact_limit: int = field(default=0)
    pic_limit: int = field(default=0)
    post_limit: int = field(default=0)

    post_link: str = ""
    updated_at: datetime = field(default=datetime.today())
    created_at: datetime = field(default=datetime.today())

    def to_text(self, where: str = None) -> str:
        title: str = self.title or '‚ûñ'
        description: str = self.description or '‚ûñ'
        price: float | int | str = self.price or '‚ûñ'
        contacts: str = self.contacts and self.humanize_phone_numbers() or '‚ûñ'

        if where == "edit" and self.pic_limit == 0:
            photos_len: str = "<code>–ù–µ—Ç —Ñ–æ—Ç–æ</code>"
        else:
            photos_len: str = self.photos_ids and str(len(self.photos_ids)) + ' —à—Ç' or '‚ûñ'

        if self.state_class in ("Sell", "EditSell"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        ttags = self.state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'
        ttitle = self.state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') \
                 or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        tdescription = self.state == 'description' and hunderline(
            '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
        tphoto = self.state == 'photo' and \
                 hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        tcontact = self.state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') \
                   or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        if self.state_class in ("Sell", "EditSell"):
            tprice = self.state == 'price' and hunderline('–¶–µ–Ω–∞') or '–¶–µ–Ω–∞'
        else:
            tprice = self.state == 'price' and hunderline(
                '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'

        return (self.current_heading(where=where) +
                f"1. {ttags}: {self.make_tags()}\n"
                f"2. {ttitle}: {hbold(title)}\n"
                f"3. {tdescription}: {hitalic(description)}\n"
                f"4. {tphoto}: {photos_len}\n"
                f"5. {tprice}: {hcode(str(price) + ' ' + (self.price and self.currency or ''))} {self.price and negotiable or ''}\n"
                f"6. {tcontact}: {contacts}\n")

    def current_heading(self, where: str = None) -> str:
        match self.state:
            case "tags":
                if not self.tags and self.state_class == "Sell":
                    return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ ' \
                           f'–Ω–∏–∂–µ (–º–∞–∫—Å. <code>{self.tag_limit}</code>):\n\n'
                elif not self.tags and self.state_class == "Buy":
                    return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ ' \
                           f'–∫—É–ø–∏—Ç—å –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–º–∞–∫—Å. <code>{self.tag_limit}</code>):\n\n'
                else:
                    return '#Ô∏è‚É£  –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –Ω–∏–∂–µ' \
                           f'(–º–∞–∫—Å. <code>{self.tag_limit}</code>).\n\n'

            case 'title':
                if not self.title and self.state_class == "Sell":
                    return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
                elif not self.title and self.state_class == "Buy":
                    return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
                           '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
                else:
                    return 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' \
                           ' –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n'

            case 'description':
                if not self.description and self.state_class == "Sell":
                    return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥:\n\n'
                elif not self.description and self.state_class == "Buy":
                    return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä–æ–µ ' \
                           '–≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\n'
                else:
                    return 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n'

            case 'price':
                if not self.price and self.state_class == "Sell":
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É –∏ —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç–æ—Ä–≥:\n\n'
                elif not self.price and self.state_class == "Buy":
                    return 'üí∏ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∏ —É–∫–∞–∂–∏—Ç–µ ' \
                           '–≤–∞–ª—é—Ç—É:\n\n'
                else:
                    return 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é —Ü–µ–Ω—É.\n\n'

            case 'contact':
                if not self.contacts:
                    return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>):\n\n'
                else:
                    return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ' \
                           ' –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ' \
                           f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>).\n\n'

            case _:
                if where == "edit" and self.pic_limit == 0:
                    return '‚õîÔ∏è –¢–∞–∫ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–∫–∏ ' \
                           '–≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫–∏ –ø—Ä–∏ ' \
                           '–∏–∑–º–µ–Ω–µ–Ω–∏–∏. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ ' \
                           '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n'
                elif not self.photos_ids and self.state_class == "Sell":
                    return 'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –ø–æ –æ–¥–Ω–æ–º—É ' \
                           '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'
                elif not self.photos_ids:
                    return 'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
                           '–ø–æ –æ–¥–Ω–æ–º—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'
                else:
                    return 'üì∑ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
                           '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
                           '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n' \
                           f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'

    def preview(self, where: str = None) -> str:
        preview_list: list[str] = []
        if self.state_class in ("Sell", "EditSell"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        if self.tags:
            preview_list.append(("–¢–µ–≥–∏: " + self.make_tags()))
        else:
            preview_list.append('–¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è')

        if self.title:
            preview_list.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(self.title)}")

        if self.description:
            preview_list.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {hitalic(self.description)}")
        else:
            preview_list.append("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùóÔ∏è")

        if self.price and self.state_class in ("Sell", "EditSell"):
            preview_list.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {hcode(str(self.price) + ' ' + (self.price and self.currency or ''))} "
                                f"{self.price and negotiable or ''}")
        elif not self.price and self.state_class in ("Sell", "EditSell"):
            preview_list.append("–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚ùóÔ∏è")
        elif self.price and self.state_class not in ("Sell", "EditSell"):
            preview_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")

        if self.contacts:
            preview_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        else:
            preview_list.append("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è")

        if self.photos_ids:
            preview_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        if where == "edit":
            stat_text: str = (f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {self.post_link}\n"
                              f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {self.get_status()}\n"
                              f"{self.make_datetime_text()}")
            preview_list.append(stat_text)

        return '\n\n'.join(preview_list)

    def confirm(self) -> str:
        if self.state_class in ("Sell", "EditSell"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        confirm_list: list[str] = [
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
            " —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
            f"–¢–µ–≥–∏: {self.make_tags(self.state_class)}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hitalic(self.description)}"
        ]
        if self.price and self.state_class not in ("Sell", "EditSell"):
            confirm_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")
        else:
            confirm_list.append(f"–¶–µ–Ω–∞: {hcode(str(self.price) + ' ' + (self.price and self.currency or ''))} "
                                f"{self.price and negotiable or ''}",)
        confirm_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
        if self.title:
            confirm_list.insert(2, f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(self.title)}")
        if self.photos_ids:
            confirm_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")

        return '\n\n'.join(confirm_list)

    def post(self) -> str:
        if self.state_class in ("Sell", "EditSell"):
            negotiable: str = '(—Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω)' if self.negotiable else '(—Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞)'
        else:
            negotiable: None = None

        post_list: list[str] = [
            self.make_tags(self.state_class),
            f"{hitalic(self.description)}",

            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}",
            f"–¢–µ–ª–µ–≥—Ä–∞–º: {self.mention}"
        ]

        if self.title:
            post_list.insert(1, f"{hbold(self.title)}")
        if self.price:
            post_list.insert(-2, f"{hcode(str(self.price) + ' ' + self.currency) + ' ' + negotiable or ''}")

        return '\n\n'.join(post_list)

    def humanize_phone_numbers(self) -> str:
        list_of_numbers: list[str] = list()
        for number in self.contacts:
            if not number.startswith('+'):
                number = '+' + number
            list_of_numbers.append(hcode(number))

        return ", ".join(list_of_numbers)

    def make_tags(self, state_class: str = None) -> str:
        print(state_class)
        tags = self.tags
        if state_class:
            tags.insert(0, "–ø—Ä–æ–¥–∞–º" if state_class == "Sell" else "–∫—É–ø–ª—é")
        return ", ".join(["#" + tag for tag in tags])

    def make_datetime_text(self) -> str:
        return f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: <code>{self.created_at.strftime('%d.%m.%Y %H:%M:%S')}</code>\n" \
               f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>{self.updated_at.strftime('%d.%m.%Y %H:%M:%S')}</code>"

    def get_status(self) -> str:
        status: dict = {
            ACTIVE: "–ê–∫—Ç–∏–≤–Ω–æ–µ ‚úÖ",
            INACTIVE: "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ ‚ùå",
            REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ö†Ô∏è"
        }
        return status.get(self.status, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")

    @property
    def currency(self):
        return {'USD': '$', 'EUR': '‚Ç¨', 'RUB': '‚ÇΩ', 'UAH': '‚Ç¥'}.get(self.currency_code, "‚Ç¥")


# @dataclass
# class SalesAd(Ad):
#     def to_text(self, where: str = None) -> str:
#
#
#     def current_heading(self, where: str = None) -> str:
#
#     def preview(self, where: str = None) -> str:
#
#
#     def confirm(self, state_class: str = None) -> str:
#
#
#     def post(self) -> str:
#
#
#
# class PurchaseAd(Ad):
#     def to_text(self, where: str = None) -> str:
#         description: str = self.description or '‚ûñ'
#         title: str = self.title or '‚ûñ'
#         photos_len: str = self.photos_ids and str(len(self.photos_ids)) + ' —à—Ç' or '‚ûñ'
#         contacts: str = self.contacts and self.humanize_phone_numbers() or '‚ûñ'
#         price: float | int | str = self.price or '‚ûñ'
#
#         ttags = self.state == 'tags' and hunderline('–¢–µ–≥–∏') or '–¢–µ–≥–∏'
#         ttitle = self.state == 'title' and hunderline('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') \
#                  or '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
#         tdescription = self.state == 'description' and hunderline(
#             '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥') or '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥'
#         tphoto = self.state == 'photo' and hunderline('–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
#         tcontact = self.state == 'contact' and hunderline('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') or '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
#         tprice = self.state == 'price' and hunderline('–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') or '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
#
#         return (self.current_heading() +
#                 f"1. {ttags}: {self.make_tags()}\n"
#                 f"2. {ttitle}: {hbold(title)}\n"
#                 f"3. {tdescription}: {hitalic(description)}\n"
#                 f"4. {tphoto}: {photos_len}\n"
#                 f"5. {tprice}: {hcode(str(price) + ' ' + (self.price and self.currency or ''))}\n"
#                 f"6. {tcontact}: {contacts}\n")
#
#     def current_heading(self, where: str = None) -> str:
#         match self.state:
#             case "tags":
#                 if not self.tags:
#                     return '#Ô∏è‚É£  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ ' \
#                            f'–∫—É–ø–∏—Ç—å –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–º–∞–∫—Å. <code>{self.tag_limit}</code>):\n\n'
#                 else:
#                     return '#Ô∏è‚É£  –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ' \
#                            f'—Ç–µ–≥, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π (–º–∞–∫—Å. <code>{self.tag_limit}</code>).\n\n'
#
#             case 'title':
#                 if not self.title:
#                     return 'üî° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
#                            '(—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n'
#                 else:
#                     return 'üî° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#                            '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n'
#
#             case 'description':
#                 if not self.description:
#                     return 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä–æ–µ ' \
#                            '–≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\n'
#                 else:
#                     return 'üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#                            '–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n'
#
#             case 'price':
#                 if not self.price:
#                     return 'üí∏ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∏ —É–∫–∞–∂–∏—Ç–µ ' \
#                            '–≤–∞–ª—é—Ç—É:\n\n'
#                 else:
#                     return 'üí∏ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#                            '–Ω–æ–≤—É—é —Ü–µ–Ω—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n\n'
#
#             case 'contact':
#                 if not self.contacts:
#                     return 'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ' \
#                            f'(–º–∞–∫—Å. <code>{self.contact_limit}</code>):\n\n'
#                 else:
#                     return 'üìû –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#                            f'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä (–º–∞–∫—Å. <code>{self.contact_limit}</code>).\n\n'
#
#             case _:
#                 if not self.photos_ids:
#                     return 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ' \
#                            '–ø–æ –æ–¥–Ω–æ–º—É (—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n' \
#                            f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>:\n\n'
#                 else:
#                     return 'üñº –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#                            '–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–∂–º–∏ –Ω–∞ ' \
#                            '–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n' \
#                            f'P.s. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <code>{self.pic_limit}</code>'
#
#     def preview(self, where: str = None) -> str:
#         preview_list: list[str] = []
#
#         if self.tags:
#             preview_list.append(self.make_tags())
#         else:
#             preview_list.append('–¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è')
#
#         if self.title:
#             preview_list.append(f"–ö—É–ø–ª—é {hbold(self.title)}")
#
#         if self.description:
#             preview_list.append(f"{hitalic(self.description)}")
#         else:
#             preview_list.append("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùóÔ∏è")
#
#         if self.price:
#             preview_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")
#
#         if self.contacts:
#             preview_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
#         else:
#             preview_list.append("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è")
#
#         if self.photos_ids:
#             preview_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")
#
#         if where == "edit":
#             stat_text: str = (f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {self.post_link}\n"
#                               f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {self.get_status()}\n"
#                               f"{self.make_datetime_text()}")
#             preview_list.append(stat_text)
#
#         return '\n\n'.join(preview_list)
#
#     def confirm(self, state_class: str = None) -> str:
#         confirm_list: list[str] = [
#             "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
#             " —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
#             f"–¢–µ–≥–∏: {self.make_tags(state_class)}",
#             f"–û–ø–∏—Å–∞–Ω–∏–µ: {hitalic(self.description)}"
#         ]
#
#         if self.price:
#             confirm_list.append(f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {hcode(str(self.price) + ' ' + self.currency)}")
#
#         confirm_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
#
#         if self.title:
#             confirm_list.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(self.title)}")
#         if self.photos_ids:
#             confirm_list.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {len(self.photos_ids)} —à—Ç")
#
#         return '\n\n'.join(confirm_list)
#
#     def post(self) -> str:
#         post_list: list[str] = [
#             self.make_tags()
#         ]
#
#         if self.title:
#             post_list.append(f"–ö—É–ø–ª—é {hbold(self.title)}")
#
#         post_list.append(f"{hitalic(self.description)}")
#         if self.price:
#             post_list.append(f"{hcode(str(self.price) + ' ' + self.currency)}")
#         post_list.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.humanize_phone_numbers()}")
#         post_list.append(f"–¢–µ–ª–µ–≥—Ä–∞–º: {self.mention}")
#         return '\n\n'.join(post_list)
